/* eslint-disable no-restricted-globals */

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute, setCatchHandler } from "workbox-routing";
import {
  StaleWhileRevalidate,
  CacheFirst,
  NetworkFirst,
} from "workbox-strategies";

clientsClaim();

// Precache assets generated by your build
precacheAndRoute(
  self.__WB_MANIFEST.concat([{ url: "/manifest.json", revision: null }])
);

// App Shell routing
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(({ request, url }) => {
  if (request.mode !== "navigate") return false;
  if (url.pathname.startsWith("/_")) return false;
  if (url.pathname.match(fileExtensionRegexp)) return false;
  return true;
}, createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html"));

// Cache image files
registerRoute(
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"),
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [new ExpirationPlugin({ maxEntries: 50 })],
  })
);

// Cache static assets (CSS, JS, Fonts)
registerRoute(
  ({ request }) => ["style", "script", "font"].includes(request.destination),
  new StaleWhileRevalidate({
    cacheName: "static-resources",
  })
);

// Optional: Cache API GET requests
registerRoute(
  ({ url, request }) =>
    request.method === "GET" &&
    url.origin === "https://nodeapi-dzib.onrender.com",
  new NetworkFirst({
    cacheName: "api-cache",
    networkTimeoutSeconds: 15,
    plugins: [
      {
        fetchDidSucceed: async ({ request, response }) => {
          console.log("[SW] API fetched from network:", request.url);
          return response;
        },
        handlerDidError: async ({ request }) => {
          console.log("[SW] Network error for:", request.url);
        },
      },
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 60 * 60,
      }),
    ],
  }),
  "GET"
);


self.addEventListener("fetch", (event) => {
  if (event.request.url.startsWith("https://nodeapi-dzib.onrender.com")) {
    console.log("[SW] Fetching API:", event.request.url);
  }
});

// Cache CDN assets like Bootstrap, FontAwesome, jQuery
registerRoute(
  ({ url }) =>
    url.origin.includes("cdnjs.cloudflare.com") ||
    url.origin.includes("cdn.jsdelivr.net") ||
    url.origin.includes("code.jquery.com"),
  new StaleWhileRevalidate({
    cacheName: "cdn-assets",
    plugins: [
      new ExpirationPlugin({ maxEntries: 20, maxAgeSeconds: 7 * 24 * 60 * 60 }),
    ], // 1 week
  })
);

// Fallback for offline navigation
setCatchHandler(async ({ event }) => {
  if (event.request.destination === "document") {
    return caches.match(process.env.PUBLIC_URL + "/index.html");
  }
  return Response.error();
});

// Listen for skipWaiting message
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});
